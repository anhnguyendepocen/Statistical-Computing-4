---
title: Functions
author: 'Brandon Moretz'
date: '21th May 2020'
options:
    out_path: 02_Functions.md
    doctype: github
    export_on_save: {markdown: true}
---  
  
  
#  Functions
  
  
```julia
using Plots;
using CalculusWithJulia;
  
gr(fmt = :png)
```
  
```julia
f(x) = 1 - x^2/2
plot(f, -3, 3)
```
  
```julia
f(x) = cos(x)
g(x) = x^2 - x
h(x) = sqrt(x)
  
f(pi), g(2), h(4)
```
  
```julia
cellplan(x) = x < 500 ? 20.0 : 20.0 + 0.05 * (x-500)
  
plot(cellplan, 0, 1000)
```
  
```julia
m, b = 2, 3
f(x) = m*x + b
  
plot(f, -3, 3)
f(0), f(2)
```
  
```julia
f(x; m=1, b=0) = m*x + b
  
f(0)
f(0, m=3, b=2)
  
plot(f, -3, 3)
```
  
```julia
function f(x; g = 9.8, v0 = 200, theta = 45, k = 1/2)
  a = v0 * cosd(theta)
  (g/(k*a) + tand(theta))* x + (g/k^2) * log(1 - k/a*x)
end
  
plot(f, -10, 10)
```
  
```julia
methods(log, (Number,)) |> collect
```
  
```julia
Area(w, h) = w * h
  
h(w) = (20 - 2*w)/2
  
Area(w) = Area(w, h(w))
  
```
  
```julia
plot(Area, 0, 10)
```
  
<img src="https://latex.codecogs.com/gif.latex?g(x)%20=%20f(x%20-%20c)"/>
  
```julia
f(x) = x^2 - 2x
g(x) = f(x - 3)
  
plot(f, -3, 3)
plot!(g, -3, 3)
```
  
```julia
function shift_right(f; c=0)
  function(x)
    f(x - c)
  end
end
```
  
```julia
f(x) = x^2 - 2x
l = shift_right(f, c=3)
  
plot(f, -5, 5)
plot!(l)
```
  
```julia
shift_right(f, c=0) = x -> f(x - c)
```
  
##  Secant Line
  
  
<img src="https://latex.codecogs.com/gif.latex?m%20=%20&#x5C;frac{f(b)%20-%20f(a)}{b%20-%20a}"/>
  
<img src="https://latex.codecogs.com/gif.latex?y%20=%20f(a)%20+%20m%20*%20(x%20-%20a)"/>
  
```julia
function secantf(f, a, b)
  m = (f(b) - f(a)) / (b - a)
  x -> f(a) + m * (x - a)
end
```
  
```julia
f(x) = x^2 - 2
a, b =  -5, 2
  
sf = secantf(f, a, b)
  
plot(f, -10, 10)
plot!(sf, -5, 2)
```
  
```julia
function secant_intersection(f, a, b)
  # solve 0 = f(b) + m * (x-b) where the slope of the secant line
  # x = b - f(b)/m
  m = (f(b) - f(a)) / (b - a)
  b - f(b) / m
end
```
  
```julia
f(x) = x^2 - 2
a, b = 1, 2
c = secant_intersection(f, a, b)
```
  
```julia
  
plot(f, 1, 1.5, color = :lightblue, linewidth = 3)
plot!([c], [f(c)], color = "black", line = :dot, linewidth = 4)
hline!([0], color = :red, linewidth = 1)
```
  
```julia
f(x; mu=0, sigma=1) = 1/sqrt(2pi*sigma) * exp(-(1/2)*(x-mu)^2/sigma)
  
plot(f)
```
  
```julia
(sin ∘ cos)(pi/4)
  
sin ∘ cos(pi/4)
```
  
```julia
secant_intersection(f, a, b) = b - f(b) * (b - a) / (f(b) - f(a))  # rewritten
f(x) = x^2 - 2
a, b = 1//1, 2//1
c = secant_intersection(f, a, b)
  
a, b = b, c
c = secant_intersection(f, a, b)
  
a, b = b, c
c = secant_intersection(f, a, b)
  
plot(f)
```
  
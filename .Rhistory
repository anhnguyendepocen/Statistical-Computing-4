m.g1
m.dat <- data.table(group1 = m.g1, group2 = m.g2, group3 = m.g3)
m.dat <- data.table(group1 = m.g1, group2 = m.g2, group3 = m.g3)
ggplot(m.dat) +
geom_density(aes(group1), alpha = .6) +
geom_density(aes(group2), alpha = .6) +
geom_density(aes(group3), alpha = .6)
ggplot(m.dat) +
geom_histogram(aes(group1), alpha = .6) +
geom_histogram(aes(group2), alpha = .6) +
geom_histogram(aes(group3), alpha = .6)
rbind(m.g1, m.g2)
m.dat <- data.table(group1 = m.g1, group2 = m.g2, group3 = m.g3)
m.dat.long <- melt(m.dat)
m.dat.long
ggplot(m.dat.long) +
geom_density(aes(value, group = variable), alpha = .6)
geom_density(aes(value, group = variable), alpha = .6) +
geom_histogram(aes(value, group = variable), alphat = .75)
ggplot(m.dat.long) +
geom_density(aes(value, group = variable), alpha = .6) +
geom_histogram(aes(value, group = variable), alphat = .75)
ggplot(m.dat.long) +
geom_density(aes(value, group = variable), alpha = .6) +
geom_histogram(aes(value, group = variable), alpha = .75)
ggplot(m.dat.long) +
geom_density(aes(value, by = variable), alpha = .6) +
geom_histogram(aes(value, group = variable), alpha = .75)
ggplot(m.dat.long) +
geom_density(aes(value, color = variable), alpha = .6) +
geom_histogram(aes(value, color = variable), alpha = .75)
ggplot(m.dat.long) +
geom_density(aes(value, color = variable), alpha = .6) +
geom_histogram(aes(value, fill = variable), alpha = .75)
ggplot(m.dat.long) +
geom_density(aes(value, color = variable), alpha = .6) +
geom_histogram(aes(value, fill = variable), alpha = .75, bins = 40)
ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6) +
geom_histogram(aes(value, fill = variable), alpha = .75, bins = 40)
ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
m.dat <- data.table(group1 = m.g1, group2 = m.g2, group3 = m.g3)
m.dat.long <- melt(m.dat)
p1 <- ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
p2 <- ggplot(m.dat.long) +
geom_histogram(aes(value, fill = variable), alpha = .75, bins = 40)
grid.arrange(p1, p2)
p1 <- ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
p2 <- ggplot(m.dat.long) +
geom_histogram(aes(value, fill = variable, color = "black"), alpha = .75, bins = 40)
grid.arrange(p1, p2)
p1 <- ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
p2 <- ggplot(m.dat.long) +
geom_point(aes(x = group, y = value), alpha = .75, bins = 40)
grid.arrange(p1, p2, ncol=2)
ggplot(m.dat.long) +
geom_point(aes(x = group, y = value), alpha = .75, bins = 40)
ggplot(m.dat.long) +
geom_point(aes(x = group, y = value), alpha = .75)
ggplot(m.dat.long) +
geom_point(aes(x = variable, y = value), alpha = .75)
ggplot(m.dat.long) +
geom_point(aes(x = variable, y = value, color = variable), alpha = .75)
m.dat <- data.table(group1 = m.g1, group2 = m.g2, group3 = m.g3)
m.dat.long <- melt(m.dat)
p1 <- ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
p2 <- ggplot(m.dat.long) +
geom_point(aes(x = variable, y = value, color = variable), alpha = .75)
grid.arrange(p1, p2, ncol=2)
p2 <- ggplot(m.dat.long) +
geom_point(aes(x = mean(variable), y = value, color = variable), alpha = .75)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
p2 <- ggplot(m.dat.long) +
geom_point(aes(x = variable, y = mean(value), color = variable), alpha = .75)
grid.arrange(p1, p2, ncol=2)
m.dat <- data.table(group1 = m.g1, group2 = m.g2, group3 = m.g3)
m.dat.long <- melt(m.dat)
m.dat.long[, Mean = mean(value), by = variable]
m.dat.long
m.dat.long[, Mean := mean(value), by = variable]
m.dat.long
p1 <- ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
p2 <- ggplot(m.dat.long) +
geom_point(aes(x = variable, y = Mean, color = variable), alpha = .75)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(m.dat.long) +
geom_density(aes(value, fill = variable), alpha = .6)
p2 <- ggplot(m.dat.long) +
geom_point(aes(x = variable, y = Mean, color = variable), alpha = .75, size = 6)
grid.arrange(p1, p2, ncol=2)
d.gl.2 <- m.g1 - m.g2
mean(d.g1.2)
d.g1.2 <- m.g1 - m.g2
mean(d.g1.2)
quantile(d.g1.2, prob=c(0.025, 0.975))
sum(m.g2 > m.g1) / nsim
data("periparusater")
dat <- periparusater
mod <- lm(wing ~ sex + age, data=dat)
dat
plot(mod)
newdat <- expand.grid(sex = factor(c(1, 2)), age = factor(c(3, 4)))
newdat$fit <- predict(mod, newdat=newdat)
newdat <- expand.grid(sex = factor(c(1, 2)), age = factor(c(3, 4)))
newdat$fit <- model.matrix(~sex + age, dat=newdat) %*% coef(mod)
newdat
bsim <- sim(mod, n.sim = nsim)
Xmat <- model.matrix(formualt(mod)[c(1,3)], dat = newdat)
Xmat <- model.matrix(formulat(mod)[c(1,3)], dat = newdat)
Xmat <- model.matrix(formula(mod)[c(1,3)], dat = newdat)
for(i in 1:nsim) fitmat[, i] <- Xmat %*% bsim@coef[i, ]
fitmat <- matrix(ncol = nsim, nrow = lnrow(newdat))
Xmat <- model.matrix(formula(mod)[c(1,3)], dat = newdat)
for(i in 1:nsim) fitmat[, i] <- Xmat %*% bsim@coef[i, ]
nsim <- 2000
bsim <- sim(mod, n.sim = nsim)
fitmat <- matrix(ncol = nsim, nrow = lnrow(newdat))
Xmat <- model.matrix(formula(mod)[c(1,3)], dat = newdat)
nsim <- 2000
bsim <- sim(mod, n.sim = nsim)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
Xmat <- model.matrix(formula(mod)[c(1,3)], dat = newdat)
for(i in 1:nsim) fitmat[, i] <- Xmat %*% bsim@coef[i, ]
alpha <- .05
intervals <- c(alpha/2, 1 - alpha/2)
newdat$lower <- apply(fitmat, 1, quantile, prob = intervals)
newdat$lower <- tapply(fitmat, 1, quantile, prob = intervals)
newdat$lower <- mapply(fitmat, 1, quantile, prob = intervals)
newdat$lower <- lapply(fitmat, 1, quantile, prob = intervals)
newdat$lower <- apply(fitmat, 1, quantile, prob = intervals[1])
newdat
intervals <- c(lower = alpha/2, upper = 1 - alpha/2)
intervals
https://i.ibb.co/Jp2Gwff/Dusk-Enigma.png
apply(fitmat, 1, quantile, prob = intervals[1])
apply(fitmat, 1, quantile, prob = intervals)
tapply(fitmat, 1, quantile, prob = intervals)
sapply(fitmat, 1, quantile, prob = intervals)
lapply(fitmat, 1, quantile, prob = intervals)
apply(fitmat, 1, quantile, prob = intervals)
T(apply(fitmat, 1, quantile, prob = intervals))
t(apply(fitmat, 1, quantile, prob = intervals))
ci <- t(apply(fitmat, 1, quantile, prob = intervals))
cbind(newdat, ci)
newdat <- expand.grid(sex = factor(c(1, 2)), age = factor(c(3, 4)))
newdat$fit <- model.matrix(~sex + age, dat=newdat) %*% coef(mod)
nsim <- 2000
bsim <- sim(mod, n.sim = nsim)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
Xmat <- model.matrix(formula(mod)[c(1,3)], dat = newdat)
for(i in 1:nsim) fitmat[, i] <- Xmat %*% bsim@coef[i, ]
alpha <- .05
intervals <- c(lower = alpha/2, upper = 1 - alpha/2)
ci <- t(apply(fitmat, 1, quantile, prob = intervals))
cbind(newdat, ci)
mod2 <- lm(wing ~ sex + age + sex:age, data = dat)
mod2 <- lm(wing ~ sex * age, data = dat)
mod2
mod2 <- lm(wing ~ sex + age + sex:age, data = dat)
bsim2 <- sim(mod2, n.sim = nsim)
quantile(bsim@coef[, 4], prob = c(0.025, .5. 0.975))
quantile(bsim@coef[, 4], prob = c(0.025, 0.5, 0.975))
quantile(bsim2@coef[, 4], prob = c(0.025, 0.5, 0.975))
summary(mod2)$sigma
mean(abs(bsim@coef[, 4]) > 0.3)
mean(abs(bsim2@coef[, 4]) > 0.3)
coef(mod2)
apply(bsim2@coef, 2, quantile, prob = c(0.025, .0.975))
apply(bsim2@coef, 2, quantile, prob = c(0.025, 0.975))
quantile(bsim2@coef[, 2], prob = c(0.025, 0.5, 0.975))
quantile(bsim2@coef[, 2] + bsim2@coef[, 4], prob = c(0.025, 0.5, 0.975))
sum(bsim@coef[, 2] < 0)/nsim
sum(bsim@coef[, 2] + bsim2@coef[, 4] < 0) / nsim # adults
bsim2 <- sim(mod2, n.sim = nsim)
quantile(bsim2@coef[, 4], prob = c(0.025, 0.5, 0.975))
summary(mod2)$sigma
a
mean(abs(bsim2@coef[, 4]) > 0.3)
coef(mod2)
applyd
quantile(bsim2@coef[, 2], prob = c(0.025, 0.5, 0.975))
sum(bsim@coef[, 2] < 0)/nsim # for juveniles (reference level)
sum(bsim@coef[, 2] + bsim2@coef[, 4] < 0) / nsim # adults
data("ellenberg")
index <- is.element(ellenberg$Species, c("Ap", "Dg"))
dat <- ellenberg[index, ] # select two species
index <- is.element(ellenberg$Species, c("Ap", "Dg"))
dat <- ellenberg[index, ] # select two species
dat <- droplevels(dat) # drop unused factor levels
str(dat) # definitions
mod <- lm(log(Yi.g) ~ Species + Water, data = dat)
head(model.matrix(mod)) # print the first 6 rows of the matrix
summary(mod)
mod2 <- lm(log(Yi.g) ~ Species*Water, data = dat)
summary(mod2)
nsim <- 2000
bsim <- sim(mod2, n.sim = nsim)
xatcross <- crosspoint(coef(bsim[, 1]), coef(bsim)[, 3])
coefs <- coef(bsim)
coefs
xatcross <- crosspoint(coefs[, 1], coefs[, 3],
coefs[, 1] + coefs[, 2], coefs[, 3] + coefs[, 4])[ , 1]
xatcross
xatcross[xatcross< (-5)] <- -5
xatcross
xatcross
th <- hist(xatcross, breaksw = seq(-5.5, 140.5, by=5))
plot(th$mids, cumsum(th$counts)/2000, type = "l", lwd=2, las=1,
ylim=c(0, 1), ylab="P(Dg > Ap|data)", xlab="Average diistance to ground water (cm)")
data(mdat)
data(mdat)
mod <- lm(y ~ x1 + x2, data = mdat)
summary(mod)
cor(dat[, 2:5])
cor(dat[, 2:6])
cor(mdat[, 2:6])
library(ggpairs, quietly = TRUE, warn.conflicts = FALSE)
library(GGally, quietly = TRUE, warn.conflicts = FALSE)
ggpairs(mdat)
ggcor(mdat)
own.graph <- function(x, y) {
points(x, y, pch=16, cor=rgb(1, 0.5, 0.0, 0.8))
abline(lm(y~x))
}
pairs(mdat, panel = own.graph)
data(swallows)
levels(swapplows$nesting_id)
data(swallows)
data("swallows)
data("swallows")
levels(swapplows$nesting_id)
levels(swallows$nesting_aid)
contrasts(swallows$artnest)
contrasts(swallows$nhirrus)
str(swallows)
contrasts(swallows$artif_nest)
contrasts(swallows$nesting_aid)
contrasts(swallows$nesting_aid)
swallows$nesting_aid <- factor(swallows$nesting_aid, levels =
c("none", "support", "artif_nest", "both"),
ordered = T)
levels(swallows$nesting_aid)
levels(swallows$nesting_aid)
contracts(swallows$nesting_aid)
contrasts(swallows$nesting_aid)
nsim <- 1000
bsim <- sim(mod, n.sim = nsim)
nsim <- 1000
bsim <- sim(mod, n.sim = nsim)
newdat <- data.frame(x = seq(10, 30, by=0.1))
newmodmat <- model.matrix(~x, data = newdat)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
for(i in 1:nsim) fitmat[, i] <- newmodmat %*% coef(bsim)[i, ]
plot(x, y, pch=16, las=1, cex.lab=1.2)
abline(mod, lwd=2)
lines(newdat$x, apply(fitmat, 1, quantile, prob = 0.025, lty=3))
lines(newdat$x, apply(fitmat, 1, quantile, prob=0.975, lty=3))
mod <- lm(y~x)
mod
summary(mod)
summary(mod)$sigma
nsim <- 1000
bsim <- sim(mod, n.sim = nsim)
newdat <- data.frame(x = seq(10, 30, by=0.1))
newmodmat <- model.matrix(~x, data = newdat)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
for(i in 1:nsim) fitmat[, i] <- newmodmat %*% coef(bsim)[i, ]
plot(x, y, pch=16, las=1, cex.lab=1.2)
abline(mod, lwd=2)
lines(newdat$x, apply(fitmat, 1, quantile, prob = 0.025, lty=3))
lines(newdat$x, apply(fitmat, 1, quantile, prob=0.975, lty=3))
newdat <- data.frame(x = seq(10, 30, by=0.1))
newmodmat <- model.matrix(~x, data = newdat)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
for(i in 1:nsim) fitmat[, i] <- newmodmat %*% coef(bsim)[i, ]
bsim
n <- 50 # sample size
sigma <- 5 # standard deviation of the residuals
b0 <- 2 # intercept
b1 <- 0.7 # slope
x <- runif(n, 10, 30) # sample values of the covariate
yhat <- b0 + b1*x
y <- rnorm(n, yhat, sd=sigma)
# plot the data
plot(x, y, pch=16, las=1, cex.lab=1.2)
abline(lm(y~x), lwd=2, col="blue") # insert regression line
# add residuals
segments(x, fitted(lm(y~x)), x, y, lwd=2, col="orange", lty=3)
plot(x, y, pch=16, las=1, cex.lab=1.2)
plot(x, y, pch=16, las=1, cex.lab=1.2)
for(i in 1:nsim) abline(coef(bsim)[i, 1], coef(bsim)[i, 2],
col = rgb(0, 0, 0, 0.05))
nsim <- 1000
bsim <- sim(mod, n.sim = nsim)
plot(x, y, pch=16, las=1, cex.lab=1.2)
for(i in 1:nsim) abline(coef(bsim)[i, 1], coef(bsim)[i, 2],
col = rgb(0, 0, 0, 0.05))
newdat <- data.frame(x = seq(10, 30, by=0.1))
newmodmat <- model.matrix(~x, data = newdat)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
for(i in 1:nsim) fitmat[, i] <- newmodmat %*% coef(bsim)[i, ]
plot(x, y, pch=16, las=1, cex.lab=1.2)
lines(newdat$x, apply(fitmat, 1, quantile, prob = 0.025, lty=3))
lines(newdat$x, apply(fitmat, 1, quantile, prob=0.975, lty=3))
# prepare matrix for simulated new data
newy <- matrix(ncol = nsim, nrow = nrow(newdat))
# for each simulate4d fitted value, simulate  one new y-value
for(i in 1:nsim) newy[, i] <- rnorm(nrow(newdat), mean = fitmat[, i],
sd = bsim@sigma[i])
lines(newdat$x, apply(newy, 1, quantile, prob=0.025), lty=3)
lines(newdat$x, apply(newy, 1, quantile, prob=0.975), lty=3)
nsim <- 1000
bsim <- sim(mod, n.sim = nsim)
plot(x, y, pch=16, las=1, cex.lab=1.2)
for(i in 1:nsim) abline(coef(bsim)[i, 1], coef(bsim)[i, 2],
col = rgb(0, 0, 0, 0.05))
newdat <- data.frame(x = seq(10, 30, by=0.1))
newmodmat <- model.matrix(~x, data = newdat)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
for(i in 1:nsim) fitmat[, i] <- newmodmat %*% coef(bsim)[i, ]
plot(x, y, pch=16, las=1, cex.lab=1.2)
abline(mod, lwd=2)
lines(newdat$x, apply(fitmat, 1, quantile, prob = 0.025, lty=3))
lines(newdat$x, apply(fitmat, 1, quantile, prob=0.975, lty=3))
# prepare matrix for simulated new data
newy <- matrix(ncol = nsim, nrow = nrow(newdat))
# for each simulate4d fitted value, simulate  one new y-value
for(i in 1:nsim) newy[, i] <- rnorm(nrow(newdat), mean = fitmat[, i],
sd = bsim@sigma[i])
lines(newdat$x, apply(newy, 1, quantile, prob=0.025), lty=3)
lines(newdat$x, apply(newy, 1, quantile, prob=0.975), lty=3)
lines(newdat$x, apply(fitmat, 1, quantile, prob = 0.025, lty=3))
lines(newdat$x, apply(fitmat, 1, quantile, prob=0.975, lty=3))
nsim <- 1000
bsim <- sim(mod, n.sim = nsim)
plot(x, y, pch=16, las=1, cex.lab=1.2)
for(i in 1:nsim) abline(coef(bsim)[i, 1], coef(bsim)[i, 2],
col = rgb(0, 0, 0, 0.05))
newdat <- data.frame(x = seq(10, 30, by=0.1))
newmodmat <- model.matrix(~x, data = newdat)
fitmat <- matrix(ncol = nsim, nrow = nrow(newdat))
for(i in 1:nsim) fitmat[, i] <- newmodmat %*% coef(bsim)[i, ]
plot(x, y, pch=16, las=1, cex.lab=1.2)
abline(mod, lwd=2)
lines(newdat$x, apply(fitmat, 1, quantile, prob = 0.025, lty=3))
lines(newdat$x, apply(fitmat, 1, quantile, prob=0.975, lty=3))
plot(x, y, pch=16, las=1, cex.lab=1.2)
for(i in 1:nsim) abline(coef(bsim)[i, 1], coef(bsim)[i, 2],
col = rgb(0, 0, 0, 0.05))
# prepare matrix for simulated new data
newy <- matrix(ncol = nsim, nrow = nrow(newdat))
# for each simulate4d fitted value, simulate  one new y-value
for(i in 1:nsim) newy[, i] <- rnorm(nrow(newdat), mean = fitmat[, i],
sd = bsim@sigma[i])
plot(x, y, pch=16, las=1, cex.lab=1.2)
# prepare matrix for simulated new data
newy <- matrix(ncol = nsim, nrow = nrow(newdat))
# for each simulate4d fitted value, simulate  one new y-value
for(i in 1:nsim) newy[, i] <- rnorm(nrow(newdat), mean = fitmat[, i],
sd = bsim@sigma[i])
lines(newdat$x, apply(newy, 1, quantile, prob=0.025), lty=3)
lines(newdat$x, apply(newy, 1, quantile, prob=0.975), lty=3)
dnorm(x=0.8, mean=1, sd=0.2)
dnorm(x=0.8, mean=1, sd=0.2) * dnorm(x=1.2, mean=1, sd=0.2)
dnorm(x=0.8, mean=1, sd=0.2) * dnorm(x=1.2, mean=1, sd=0.2) *
dnorm(x=1.1, mean=1, sd=0.2)
dnorm(x=0.8, mean=1.2, sd=0.4) * dnorm(x=1.2, mean=1.2, sd=0.4) *
dnorm(x=1.1, mean=1.2, sd=0.4)
xs <- seq(from=-3, to=3, by = .01)
ys <- dnorm(xs, mean = 1, sd = .2)
plot(xs, ys)
xs <- seq(from=0, to=3, by = .01)
ys <- dnorm(xs, mean = 1, sd = .2)
plot(xs, ys)
xs <- seq(from=0, to=3, by = .01)
ys <- dnorm(xs, mean = 1, sd = .2)
dat <- data.table(x = xs, y = ys)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
library(ggthemes, quietly = TRUE, warn.conflicts = FALSE)
library(scales, quietly = TRUE, warn.conflicts = FALSE)
library(cowplot, quietly = TRUE, warn.conflicts = FALSE)
library(GGally, quietly = TRUE, warn.conflicts = FALSE)
library(knitr, quietly = TRUE, warn.conflicts = FALSE)
library(kableExtra, quietly = TRUE, warn.conflicts = FALSE)
library(pander, quietly = TRUE, warn.conflicts = FALSE)
library(formattable, quietly = TRUE, warn.conflicts = FALSE)
library(grid, quietly = TRUE, warn.conflicts = FALSE)
library(gridExtra, quietly = TRUE, warn.conflicts = FALSE)
library(extrafont, quietly = TRUE, warn.conflicts = FALSE)
library(tinytex, quietly = TRUE, warn.conflicts = FALSE)
library(here, quietly = TRUE, warn.conflicts = FALSE)
library(lattice, quietly = TRUE, warn.conflicts = FALSE)
library(blmeco, quietly = TRUE, warn.conflicts = FALSE)
library(tidybayes, quietly = TRUE, warn.conflicts = FALSE)
library(arm, quietly = TRUE, warn.conflicts = FALSE)
library(coda, quietly = TRUE, warn.conflicts = FALSE)
options(tinytex.verbose = TRUE)
suppressMessages(library("tidyverse"))
pretty_kable <- function(data, title, dig = 2) {
kable(data, caption = title, digits = dig) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
kableExtra::kable_styling(latex_options = "hold_position")
}
theme_set(theme_light())
# Theme Overrides
theme_update(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold", color = "darkgreen"),
axis.title = element_text(face = "bold", size = 12, colour = "steelblue4"),
plot.subtitle = element_text(face = "bold", size = 8, colour = "darkred"),
legend.title = element_text(size = 12, color = "darkred", face = "bold"),
legend.position = "right", legend.title.align=0.5,
panel.border = element_rect(linetype = "solid",
colour = "lightgray"),
plot.margin = unit(c( 0.1, 0.1, 0.1, 0.1), "inches"))
dat <- data.table(x = xs, y = ys)
ggplot(dat, aes(x, y)) +
stat_density()
ggplot(dat) +
geom_line(aes(x,y))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen")
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", linetype="dots")
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2)
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2)
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=3)
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2)
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0)
p1 <- dnorm(x=0.8, mean=1, sd=0.2) * dnorm(x=1.2, mean=1, sd=0.2) *
dnorm(x=1.1, mean=1, sd=0.2)
p2 <- dnorm(x=0.8, mean=1.2, sd=0.4) * dnorm(x=1.2, mean=1.2, sd=0.4) *
dnorm(x=1.1, mean=1.2, sd=0.4)
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = p1)
p1 <- dnorm(x=0.8, mean=1, sd=0.2) * dnorm(x=1.2, mean=1, sd=0.2) *
dnorm(x=1.1, mean=1, sd=0.2)
p2 <- dnorm(x=0.8, mean=1.2, sd=0.4) * dnorm(x=1.2, mean=1.2, sd=0.4) *
dnorm(x=1.1, mean=1.2, sd=0.4)
p1
pnorm(p1, mean = 1, sd = .2)
obs <- c(0.8, 1.2, 1.1)
dnorm(obs, mean = 1, sd = 1.2)
obs <- c(0.8, 1.2, 1.1)
obs
dnorm(obs, mean = 1, sd = .2)
cumprod(dnorm(obs, mean = 1, sd = 0.2))
cumprod(dnorm(obs, mean = 1, sd = 0.2))
p1 <- dnorm(x=0.8, mean=1, sd=0.2) * dnorm(x=1.2, mean=1, sd=0.2) *
dnorm(x=1.1, mean=1, sd=0.2)
p1
prod(dnorm(obs, mean = 1, sd = 0.2))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = obs)
obs_marks <- data.table(x = obs, y = dnorm(obs, mean = 1, sd = .2))
obs_marks
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(obs_marks)
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(x, y))
obs_marks
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(xend = x, yend=y))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(x, y))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(x, y, xend=0, yend=y))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(x, y, xend=y, yend=y))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(x, y, xend=x, yend=y))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(x, y, xend=x, yend=0))
ggplot(dat) +
geom_line(aes(x,y), col = "darkgreen", lty=2) +
geom_hline(yintercept = 0) +
geom_segment(data = obs_marks, aes(x, y, xend=x, yend=0), col="darkred")

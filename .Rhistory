Tval <- intercept * sqrt( (n - 2) * C / variance * ssx )
Tval
(n - 2)
C
variance
ssx
variance
n
Tval <- intercept * sqrt( variance * ssx / n * variance )
Tval
ssx
Tval <- intercept * sqrt( (variance * ssx) / (n * variance) )
Tval
Tval <- intercept * sqrt( (variance * ssx) / ((n - 2) * variance) )
Tval
ssx
Tval <- intercept * sqrt( ((n - 2) * C) / (variance  * ssx) )
Tval
crit <- qt(alpha/2, df = n - 2)
ifelse(abs(Tval) >= crit, "Reject Null", "Fail to Reject")
alpha <- 0.02
slope + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt(variance / n)
Tval <- intercept * sqrt( ((n - 2) * C) / (variance  * ssx) )
crit <- qt(alpha/2, df = n - 2)
ifelse(abs(Tval) >= crit, "Reject Null", "Fail to Reject")
crit
ifelse(abs(Tval) < crit, "Reject Null", "Fail to Reject")
abs(Tval)
ifelse(abs(Tval) < crit, "Reject Null", "Fail to Reject")
alpha <- 0.02
slope + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt(variance / n)
Tval <- intercept * sqrt( ((n - 2) * C) / (variance  * ssx) )
crit <- qt(alpha/2, df = n - 2)
ifelse(abs(Tval) < crit, "Reject Null", "Fail to Reject")
intercept
slope
alpha <- .9
slope + qt(Lower = alpha/2, Upper = 1 - alpha/2, df = n - 2)
qt(Lower = alpha/2, Upper = 1 - alpha/2, df = n - 2)
slope + qt(c(Lower = alpha/2, Upper = 1 - alpha/2, df = n - 2))
slope + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2)
slope
qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2)
c(Lower = alpha/2, Upper = 1 - alpha/2)
alpha <- 1 - .9
slope + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2)
qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2)
C
variance
slope + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt( variance / C)
n <- 41; ybar <- 10; xbar <- 12;
ssr <- 100; ssx <- 400; variance <- 144
b1 <- ssr / ssx
b1
b0 <- ybar - xbar*b1
b0
b0
b0
ybar
alpha <- 1 - .9
crit <- qt(1 - alpha/2)
crit
ssr
alpha <- 1 - .9
crit <- qt(1 - alpha/2)
crit
((n - 2) * ssr)
Tval <- b0 * sqrt( ((n - 2) * ssr) / (variance * ssx))
Tval
crit <- qt(1 - alpha/2)
crit
Tval <- b0 * sqrt( ((n - 2) * ssr) / (variance * ssx))
b1 + qt(c( Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt( variance / ssx)
b1
b1 + qt(c( Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt( variance / ssx)
n <- 18; b1 <- 3.1; ssx <- 144; variance <- 36
alpha <- 1 - .95
b1 + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt( variance / ssx)
alpha/2
b1
n - 2
variance
ssx
b1 + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt( variance / ssx )
qt(c(Lower = alpha/2, Upper = 1 - alpha/2)
qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2)
n <- 20; b0 <- 6; ssx <- 169
variance <- 25; xvar <- 90
alpha <- 1 - .95
b0 + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt(variance / xvar)
xvar
b0 + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2) * sqrt( (variance*ssx) / (n * xvar))
n <- 27; yvar <- 100; xvar <- 625
ssr <- 200; alpha <- 1 - 0.01
b0 <- ssr / xvar
b0
slope <- ssr / xvar
r <- slope * (yvar/xvar)
r
slope
ssr
ssr
xvar
slope <- ssr / sqrt( yvar * xvar )
slope
r <- slope * (yvar/xvar)
r
r <- ssr / sqrt( yvar * xvar )
ssr
sqrt( yvar * xvar )
test.stat.T <- r * sqrt( (n-2)/ (1 - r^2))
test.stat.T
crit <- qt(1 - alpha/2, df = n - 2)
crit
n - 2
alpha <- 1 - 0.01
alpha
alpha/2
1 - alpha/2
alpha/2
alpha <- 0.01
crit <- qt(1 - alpha/2, df = n - 2)
crit
ifelse(abs(test.stat.T) >= crit, "Reject Null", "Fail to Reject Null")
n <- 5; yvar <- 16; xvar <- 25
ssr <- 10; alpha <- 0.05
r <- ssr / sqrt( yvar * xvar )
test.stat.T <- r * sqrt( (n-2)/ (1 - r^2))
crit <- qt(1 - alpha/2, df = n - 2)
ifelse(abs(test.stat.T) >= crit, "Reject Null", "Fail to Reject Null")
yvar <- 64; xvar <- 100; ssr <- 40
r <- ssr / sqrt( yvar * xvar )
r
alpha <- 0.1
crit <- qnorm(c(Lower = alpha/2, Upper = 1 - alpha/2))
crit
n <- 29; yvar <- 64; xvar <- 100; ssr <- 40
alpha <- 0.1
r <- ssr / sqrt( yvar * xvar )
crit <- qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2)
crit
test.stat.t <- sqrt( (n - 2) / (1 - r^2) )
test.stat.t
n <- 29; yvar <- 64; xvar <- 100; ssr <- 40
alpha <- 0.1
r <- ssr / sqrt( yvar * xvar )
crit <- qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df = n - 2)
test.stat.t <- sqrt( (n - 2) / (1 - r^2) )
test.stat.t
(1 - r^2)
(n - 2)
test.stat.t <- sqrt( (n - 2) / (1 - r^2) )
test.stat.T <- sqrt( (n - 2) / (1 - r^2) )
crit <- qt(1 - alpha/2, df = n - 2)
crit
ifelse( abs(test.stat.T) >= crit, "Reject null", "Fail to reject")
test.stat.T <- r * sqrt( (n - 2) / (1 - r^2) )
test.stat.T
r
(n - 2)
test.stat.T <- r * sqrt( (n - 2) / (1 - r^2) )
test.stat.T
test.stat.T <- r * sqrt( 3 / (1 - r^2) )
test.stat.T
test.stat.T <- r * sqrt( (n - 1) / (1 - r^2) )
test.stat.T
test.stat.T <- r * sqrt( (n - 2) / (1 - r^2) )
test.stat.T
crit
ifelse( abs(test.stat.T) >= crit, "Reject null", "Fail to reject")
set.seed(46)
x <- rnorm(30); y <- rnorm(30)
cor(x, y)
cor(3*x, y)
cor(x, y)
cor(3*x, y)
lsfit(x, y)$coef
lsfit(x, 3*y)$coef
xvar <- (x - mean(x))^2
xvar <- (x - mean(x))^2; yvar <- (y - mean(y))^2
xvar
xvar*yvar
xvar <- sum((x - mean(x))^2); yvar <- sum((y - mean(y))^2)
xvar*yvar
cov(x,y)
xvar <- sum((x - mean(x))); yvar <- sum((y - mean(y)))
xvar * yvar
xvar
cov(x,y)
sum((x - mean(x))) * sum((y - mean(y)))
( sum((x - mean(x))) * sum((y - mean(y))) / ( sum( (x - mean(x))^2) )
( sum((x - mean(x))) * sum((y - mean(y))) / ( sum( (x - mean(x))^2) )
( sum((x - mean(x))) * sum((y - mean(y)))
( sum((x - mean(x))) * sum((y - mean(y))) ) / sum( (x - mean(x))^2)
( sum((x - mean(x))) * sum((y - mean(y))) )
sum((y - mean(y)))
( sum((x - mean(x))) * sum((y - mean(y))) ) / sqrt( sum( (x - mean(x))^2) * sum( (y - mean(y))^2) )
( sum((x - mean(x))) * sum((y - mean(y))) ) / sqrt( sum( (x - mean(x))^2) * sum( (y - mean(y))^2) )
cor(x, y)
sum( (y - mean(y)) ^2 ) )
( sum((x - mean(x))) * sum((y - mean(y))) ) / sqrt( sum( (x - mean(x))^2) * sum( (y - mean(y)) ^2 ) )
( sum( (x - mean(x)) ) * sum( (y - mean(y)) ) )
( sum( (x - mean(x)) ) * sum( (y - mean(y)) ) ) / sqrt( sum( (x - mean(x))^2) * sum( (y - mean(y)) ^2 ) )
variance <- ( (n1 - 1)*var1 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
variance
variance
variance <- ( (n1 - 1)*s2 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
variance
xbar1 <- 15; xbar2 <- 12; s1 <- 8; s2 <- 24
n1 <- 20; n2 <- 10
variance <- ( (n1 - 1)*s2 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
variance
variance <- ( (n1 - 1)*s2 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
variance
variance <- ( (n1 - 1)*s2 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
variance
xbar1 <- 15; xbar2 <- 12; s1 <- 8; s2 <- 24
n1 <- 20; n2 <- 10
variance <- ( (n1 - 1)*s2 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
variance
variance <- ( (n1 - 1)*s1 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
variance
variance <- ( (n1 - 1)*s1 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
(n1 - 1)*s1
(n2 - 1)*s2
( n1 + n2 - 2 )
variance <- ( (n1 - 1)*s1 + (n2 - 1)*s2 ) / ( n1 + n2 - 2 )
variance
t.stat <- (xbar1 - xbar2) / sqrt( variance*(1/n1 + 1/n2))
t.stat
alpha <- 0.05
crit <- qt(alpha/2, df = n1 + n2 - 2)
crit
ifelse(abs(t.stat) >= crit, "Reject Null", "Fail to Reject")
crit <- qt(alpha/2, df = n1 + n2 - 2)
t.stat
crit <- qt(alpha/2, df = n1 + n2 - 2)
ifelse(abs(t.stat) >= crit, "Reject Null", "Fail to Reject")
crit
s1
n2
s2
n1
n2
xbar1 <- 15; xbar2 <- 12; s1sq <- 8; s2sq <- 24
variance <- ( (n1 - 1)*s1sq + (n2 - 1)*s2sq ) / ( n1 + n2 - 2 )
t.stat <- (xbar1 - xbar2) / sqrt( variance*(1/n1 + 1/n2))
t.stat
xbar1 <- 15; xbar2 <- 12; s1sq <- 8; s2sq <- 24
n1 <- 20; n2 <- 10
alpha <- 0.05
variance <- ( (n1 - 1)*s1sq + (n2 - 1)*s2sq ) / ( n1 + n2 - 2 )
t.stat <- (xbar1 - xbar2) / sqrt( variance*(1/n1 + 1/n2))
t.stat
xbar1
xbar2
1/n1
1/n2
sqrt( variance*(1/n1 + 1/n2) )
t.stat <- (xbar1 - xbar2) / sqrt( variance*(1/n1 + 1/n2) )
t.stat
variance
crit <- qt(alpha/2, df = n1 + n2 - 2)
crit
ifelse(abs(t.stat) >= crit, "Reject Null", "Fail to Reject")
abs(t.stat)
xbar1 <- 45; xbar2 <- 36; s1sq <- 4; s2sq <- 16
n1 <- 20; n2 <- 30
xbar1 <- 45; xbar2 <- 36; s1sq <- 4; s2sq <- 16
n1 <- 20; n2 <- 30
variance <- ( (n1 - 1)*s1sq + (n2 - 1)*s2sq ) / ( n1 + n2 - 2)
variance
stopifnot(variance == 11.25)
t.stat <- (xbar1 - xbar2 ) / sqrt( variance * (1/n1 + 1/n2) )
t.stat
xbar1 <- 45; xbar2 <- 36; s1sq <- 4; s2sq <- 16
n1 <- 20; n2 <- 30
variance <- ( (n1 - 1)*s1sq + (n2 - 1)*s2sq ) / ( n1 + n2 - 2)
stopifnot(variance == 11.25)
t.stat <- (xbar1 - xbar2 ) / sqrt( variance * (1/n1 + 1/n2) )
t.stat
alpha <- 0.05
crit <- qt(alpha/2, df = (n1 + n2 - 2))
crit
ifelse(abs(t.stat) >= crit, "Reject null", "Fail to Reject")
t.test(xbar1, xbar2, var.equal = T, conf.level = 1 - alpha)
w.stat <- (xbar1 - xbar2) / sqrt(s1sq/n1 + s2sq/n2)
w.stat
q1 <- s1sq/n1; q2 <- s2sq/n2
df <- (q1 + q2)^2 / ( q1^2/(n1 - 1) + q2^2/(n2 - 1) )
q1
df
qt(alpha)
qt(alpha/2, df)
qt(1 - alpha/2, df)
ifelse(abs(w.stat) >= crit, "Reject Null", "Fail to Reject")
t.stat
w.stat
xbar1 <- 10; xbar2 <- 5; s1sq <- 21; s2sq <- 29
n1 <- n2 <- 16
n1
n2
xbar1 <- 10; xbar2 <- 5; s1sq <- 21; s2sq <- 29
n1 <- n2 <- 16
n1 <- n2 <- 16; alpha <- 0.05
qt(alpha/2, 1 - alpha/2, df)
qt(alpha/2, 1 - alpha/2, df)
qt(c(alpha/2, 1 - alpha/2), df)
q1 <- s1sq/n1; q2 <- s2sq/n2
df <- (q1 + q2)^2 / ( q1^2/(n1 - 1) + q2^2/(n2 - 1) )
qt(c(alpha/2, 1 - alpha/2), df)
qt
(xbar1 - xbar2) * qt(c(alpha/2, 1 - alpha/2), df)
xbar1
(xbar1 - xbar2) * qt(c(alpha/2, 1 - alpha/2), df)
xbar1
mean(21,29)
mean(c(21,29))
(s1sq + s2sq)/2
m.diff <- (xbar1 - xbar2) / sqrt( (s1sq + s2sq) * 2/20 )
m.diff
xbar1
xbar2
(86-80)/sqrt(2*25/20)
xbar1 <- 86; xbar2 <- 80; s1sq <- s2sq <- 25
xbar1 <- 86; xbar2 <- 80; s1sq <- s2sq <- 25
n1 <- n2 <- 20; alpha <- 0.01
w.stat <- (xbar1 - xbar2) / sqrt( (s1sq + s2sq) * 2/n1 )
w.stat
xbar1 <- 86; xbar2 <- 80; s1sq <- s2sq <- 25
n1 <- n2 <- 20; alpha <- 0.01
w.stat <- (xbar1 - xbar2) / sqrt( (s1sq + s2sq) * 2/n1 )
w.stat
(xbar1 - xbar2)
(s1sq + s2sq)/n1
w.stat <- (xbar1 - xbar2) / sqrt( 2 * (s1sq + s2sq)/n1 )
w.stat
n1
(s1sq + s2sq)
w.stat <- (xbar1 - xbar2) / sqrt( 2 * (s1sq + s2sq)/2/n1 )
w.stat
w.stat <- (xbar1 - xbar2) / sqrt( 2 * s1sq/n1 )
w.stat <- (xbar1 - xbar2) / sqrt( 2 * s1sq/n1 )
w.stat
crit <- qt(alpha/2, df = n1 + n2 - 2)
crit
q1 <- s1sq/n1; q2 <- s2sq/n2
crit
df <- (q1 + q2)^2 / ( q1^2/(n1 - 1) + q2^2/(n2 - 1))
df
crit <- qt(alpha/2, df = 38)
crit
ifelse(abs(w.stat) >= crit, "Reject", "Fail to Reject")
variance <- (n1 - 1)*s1sq + (n2 - 1)*s2sq / sqrt(2 * s1sq/n1 )
variance
variance <- (xbar1 - xbar2) / sqrt(2 * s1sq/n1 )
variance
t.stat <- (xbar1 - xbar2) / sqrt(2 * s1sq/n1 )
crit <- qt(alpha/2, df = n1 + n2 - 2)
crit
ifelse(abs(t.stat) >= crit, "Reject", "Fail to Reject")
xbar1 <- 10; xbar2 <- 5; s1sq <- 21; s2sq <- 29
variance <- ( (n1 - 1)*var1 + (n2 - 1)*s2 ) / ( n1 + n2 -2 )
xbar1 <- 10; xbar2 <- 5; s1sq <- 21; s2sq <- 29
n1 <- n2 <- 16; alpha <- 0.05
q1 <- s1sq/n1; q2 <- s2sq/n2
```{r, echo = T}
xbar1 <- 10; xbar2 <- 5; s1sq <- 21; s2sq <- 29
n1 <- n2 <- 16; alpha <- 0.05
q1 <- s1sq/n1; q2 <- s2sq/n2
q1 <- s1sq/n1; q2 <- s2sq/n2
df <- (q1 + q2)^2 / (q1^2 / (n1 - 1) + q2^2 / (n2 -1) )
df
crit <- qt(alpha/2, df)
crit
variance <- sqrt(s1sq/n1 + s2sq/n2)
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2, df))
q1 <- s1sq/n1; q2 <- s2sq/n2
df <- (q1 + q2)^2 / (q1^2 / (n1 - 1) + q2^2 / (n2 -1) )
variance <- sqrt(s1sq/n1 + s2sq/n2)
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2, df))
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df)
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), df)*variance
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), n1 + n2 - 2)
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), n1 + n2 - 2) * sqrt(s1sq/n1 + s2sq/n2)
s1sq
sqp <- (s1sq+s2sq)/2
sqp
s1sq/n1 + s2sq/n2
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), n1 + n2 - 2) * sqrt(sqp * (1/n1 + 1/n2))
sqp <- (s1sq+s2sq) / 2
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), n1 + n2 - 2) * sqrt(sqp * (1/n1 + 1/n2))
sqp * (1/n1 + 1/n2)
(xbar1 - xbar2) + qt(c(Lower = alpha/2, Upper = 1 - alpha/2), n1 + n2 - 2) * sqrt(sqp * (1/n1 + 1/n2))
dat <- data.table(
M1 = c(132, 204, 603, 50, 125, 90, 185, 134),
M2 = c(92, -42, 121, 63, 182, 101, 294, 36))
dat <- data.table(
M1 = c(132, 204, 603, 50, 125, 90, 185, 134),
M2 = c(92, -42, 121, 63, 182, 101, 294, 36))
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
assignInNamespace("cedta.pkgEvalsUserCode", c(data.table:::cedta.pkgEvalsUserCode, "rtvs"), "data.table")
library(here, quietly = T, warn.conflicts = F)
library(ggplot2, quietly = T, warn.conflicts = F)
library(ggrepel, quietly = TRUE, warn.conflicts = FALSE)
library(ggthemes, quietly = TRUE, warn.conflicts = FALSE)
library(knitr, quietly = TRUE, warn.conflicts = FALSE)
library(kableExtra, quietly = TRUE, warn.conflicts = FALSE)
library(scales, quietly = TRUE, warn.conflicts = FALSE)
library(pander, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
library(formattable, quietly = TRUE, warn.conflicts = FALSE)
library(grid, quietly = TRUE, warn.conflicts = FALSE)
library(gridExtra, quietly = TRUE, warn.conflicts = FALSE)
library(WRS, quietly = TRUE, warn.conflicts = FALSE)
options(tinytex.verbose = TRUE)
suppressMessages(library("tidyverse"))
pretty_kable <- function(data, title, dig = 2) {
kable(data, caption = title, digits = dig) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
kableExtra::kable_styling(latex_options = "hold_position")
}
theme_set(theme_light())
# Theme Overrides
theme_update(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold", color = "darkgreen"),
axis.title = element_text(face = "bold", size = 12, colour = "steelblue4"),
plot.subtitle = element_text(face = "bold", size = 8, colour = "darkred"),
legend.title = element_text(size = 12, color = "darkred", face = "bold"),
legend.position = "right", legend.title.align=0.5,
panel.border = element_rect(linetype = "solid",
colour = "lightgray"),
plot.margin = unit(c( 0.1, 0.1, 0.1, 0.1), "inches"))
data.dir <- paste0(here::here(), "/datasets/")
dat <- data.table(
M1 = c(132, 204, 603, 50, 125, 90, 185, 134),
M2 = c(92, -42, 121, 63, 182, 101, 294, 36))
t.test(dat$M1, dat$M2)
t.test(dat$M1, dat$M2, conf.level = .95)
t.test(dat$M1, dat$M2, conf.level = .95)
dat <- data.table(
M1 = c(11.1, 12.2, 15.5, 17.6, 13.0, 7.5, 9.1, 6.6, 9.5, 18.0, 12.6),
M2 = c(18.2, 14.1, 13.8, 12.1, 34.1, 12.0, 14.1, 14.5, 12.6, 12.5, 19.8, 13.4, 16.8, 14.1, 12.9))
t.test(dat$M1, dat$M2, conf.level = .95)
twobinom(15, 24, 23, 42)
twobicipv(15,24,23,42)
twobicipv(20, 98, 30, 70)
# Storer-Kim
twobinom(20, 98, 30, 70)
# Beal's
twobicipv(20, 98, 30, 70)
# Storer-Kim
twobinom(20, 98, 30, 70)
# Beal's
twobicipv(20, 98, 30, 70)
p1 <- 20/121; p2 <- 15/80
p1 <- 20/121; p2 <- 15/80
Z <- (p1-p2)/sqrt(p1*(1-p1)/121 + p2*(1-p2)/80)
Z
crit <- qnorm(0.05)
crit
crit <- qnorm(0.05/2)
crit
ifelse(abs(Z) >= crit, "Reject Null", "Fail To Reject")
p1 <- 20/121; p2 <- 15/80
Z <- (p1-p2)/sqrt(p1*(1-p1)/121 + p2*(1-p2)/80)
crit <- qnorm(0.05/2)
ifelse(abs(Z) >= crit, "Reject Null", "Fail To Reject")
crit
dat <- data.table(
X1 = c(22, 23, 12, 11, 30, 22, 7, 42, 24, 33, 28, 19, 4, 34, 15, 26, 50, 27, 20, 30, 14, 42),
X2 = c(17, 22, 16, 16, 14, 29, 20, 20, 19, 14, 10, 8, 26, 9, 14, 17, 21, 16, 14, 11, 14, 11, 29, 13, 4, 16, 16, 7, 21)
)
t.test(dat$X1, dat$X2)
t.test(dat$X1, dat$X2, var.equal = T)
msmed(dat$X1, dat$X2)
msmed(dat$X1, dat$X2)
dat <- data.table(
X1 = c(22, 23, 12, 11, 30, 22, 7, 42, 24, 33, 28, 19, 4, 34, 15, 26, 50, 27, 20, 30, 14, 42),
X2 = c(17, 22, 16, 16, 14, 29, 20, 20, 19, 14, 10, 8, 26, 9, 14, 17, 21, 16, 14, 11, 14, 11, 29, 13, 4, 16, 16, 7, 21)
)
t.test(dat$X1, dat$X2)
t.test(dat$X1, dat$X2, var.equal = T)
msmed(dat$X1, dat$X2)
medpb2(x,y)
medpb2(dat$X1, dat$X2)
dat <- data.table(
X1 = c(22, 23, 12, 11, 30, 22, 7, 42, 24, 33, 28, 19, 4, 34, 15, 26, 50, 27, 20, 30, 14, 42),
X2 = c(17, 22, 16, 16, 14, 29, 20, 20, 19, 14, 10, 8, 26, 9, 14, 17, 21, 16, 14, 11, 14, 11, 29, 13, 4, 16, 16, 7, 21)
)
t.test(dat$X1, dat$X2)
t.test(dat$X1, dat$X2, var.equal = T)
medpb2(dat$X1, dat$X2)
twobinom(11,23,10,23)
dat <- data.table::fread(paste0(data.dir, "salk_dat.txt"), fill = T, sep = "&")
dat
salk <- data.table::fread(paste0(data.dir, "salk_dat.txt"), fill = T, sep = "&")
t.test(salk[,1],salk[,2])
salk
salk <- data.table::fread(paste0(data.dir, "salk_dat.txt"), fill = T, sep = ",")
salk
t.test(salk[,1],salk[,2])
salk <- data.table::fread(paste0(data.dir, "salk_dat.txt"), fill = T)
salk
t.test(salk[,1],salk[,2])
dana <- data.table::fread(paste0(data.dir, "data_dat.txt"), fill = T)
dana <- data.table::fread(paste0(data.dir, "dana_dat.txt"), fill = T)
yuen(dana[,1],dana[,2])
g1=c(2, 4, 4, 2, 2, 2, 4, 3, 2, 4, 2, 3, 2, 4, 3, 2, 2, 3, 5, 5, 2, 2)
g2=c(5, 1, 4, 4, 2, 3, 3, 1, 1, 1, 1, 2, 2, 1, 1, 5, 3, 5)
disc2com(g1,g2)

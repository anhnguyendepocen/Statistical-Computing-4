}
boot.mean <- mean(bootstrap.values)
boot.bias <- boot.mean - observed
boot.se <- sd(bootstrap.values)
boot.bias / boot.se
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
quantile(bootstrap.values, c(Lower = alpha/2, Upper = 1 - alpha/2))
groceries_sans_quaker <- groceries[Product != "Quaker Oats Life Cereal  Original ",]
stopifnot(nrow(groceries_sans_quaker) == nrow(groceries) - 2) # ensure removeed
prices.target <- groceries_sans_quaker[Store == "Target"]$Price
prices.walmart <- groceries_sans_quaker[Store == "Walmart"]$Price
N <- 10e3
observed <- mean(prices.target) - mean(prices.walmart)
bootstrap.values <- vector(mode = "numeric", length = N)
for(i in 1:N)
{
index <- sample(length(prices.target), size = length(prices.target), replace = T)
samp.target <- prices.target[index]
samp.walmart <- prices.walmart[index]
bootstrap.values[i] <- mean(samp.target) - mean(samp.walmart)
}
boot.mean <- mean(bootstrap.values)
boot.bias <- boot.mean - observed
boot.se <- sd(bootstrap.values)
boot.bias / boot.se
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
quantile(bootstrap.values, c(Lower = alpha/2, Upper = 1 - alpha/2))
prices.target <- groceries[Store == "Target"]$Price
prices.walmart <- groceries[Store == "Walmart"]$Price
N <- 10e3
observed <- mean(prices.target) - mean(prices.walmart)
bootstrap.values <- vector(mode = "numeric", length = N)
for(i in 1:N)
{
index <- sample(length(prices.target), size = length(prices.target), replace = T)
samp.target <- prices.target[index]
samp.walmart <- prices.walmart[index]
bootstrap.values[i] <- mean(samp.target) - mean(samp.walmart)
}
boot.mean <- mean(bootstrap.values)
boot.bias <- boot.mean - observed
boot.se <- sd(bootstrap.values)
boot.bias / boot.se
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
quantile(bootstrap.values, c(Lower = alpha/2, Upper = 1 - alpha/2))
quantile(bootstrap.values, c(Lower = alpha/2, Upper = 1 - alpha/2))
quantile(bootstrap.values, c(Lower = alpha/2, Upper = 1 - alpha/2))
calories.vanilla <- icecream[Flavor == "Vanilla"]$Calories
calories.chocolate <- icecream[Flavor == "Chocolate"]$Calories
N <- 10e3
observed <- mean(calories.chocolate) - mean(calories.vanilla)
bootstrap.values <- vector(mode = "numeric", length = N)
for(i in 1:N)
{
# paired data, must use the same samples from chocolate and vanilla (ie, same manufacture)
index <- sample(length(calories.vanilla), length(calories.vanilla), replace = T)
v.samp <- calories.vanilla[index]
c.samp <- calories.chocolate[index]
bootstrap.values[i] <- mean(c.samp) - mean(v.samp)
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed)
bootstrap.mean <- mean(bootstrap.values)
bootstrap.bias <- bootstrap.mean - observed
bootstrap.se <- sd(bootstrap.values)
bootstrap.bias / bootstrap.se
quantile(bootstrap.values, c(Lower = alpha/2, Upper = 1 - alpha/2))
Diving2017 <- data.table(read.csv(paste0(data.dir, "Diving2017.csv"),
header = T))
Diving2017
observed <- median(Diving2017$Final) - median(Diving2017$Semifinal)
observed
result <- vector(mode = "numeric", length = N)
N <- 10^5
result <- vector(mode = "numeric", length = N)
for(i in 1:N)
{
index <- sample(12, replace = T)
Dive.boot <- Diving2017[, index] # resample pairs
result[i] <- median(Dive.boot$Final) - median(Dive.boot$SemiFinal)
}
ggplot(data.table(values = result), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
N <- 10^5
result <- vector(mode = "numeric", length = N)
for(i in 1:N)
{
index <- sample(12, replace = T)
Dive.boot <- Diving2017[index, ] # resample pairs
result[i] <- median(Dive.boot$Final) - median(Dive.boot$SemiFinal)
}
ggplot(data.table(values = result), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
result <- vector(mode = "numeric", length = N)
for(i in 1:N)
{
index <- sample(nrow(Diving2017), replace = T)
Dive.boot <- Diving2017[index, ] # resample pairs
result[i] <- median(Dive.boot$Final) - median(Dive.boot$SemiFinal)
}
index <- sample(nrow(Diving2017), replace = T)
Dive.boot <- Diving2017[index, ] # resample pairs
index
Dive.boot
median(Dive.boot$Final)
median(Dive.boot$SemiFinal)
N <- 10^5
result <- vector(mode = "numeric", length = N)
for(i in 1:N)
{
index <- sample(nrow(Diving2017), replace = T)
Dive.boot <- Diving2017[index, ] # resample pairs
result[i] <- median(Dive.boot$Final) - median(Dive.boot$Semifinal)
}
ggplot(data.table(values = result), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
result
BookPrices <- data.table(read.csv(paste0(data.dir, "BookPrices.csv"),
header = T))
BookPrices
ggpairs(BookPrices)
BookPrices
ggplot(BookPrices, aes(Area, price, group = Area)) +
geom_boxplot(aes(col = Area))
ggplot(BookPrices, aes(Area, Price, group = Area)) +
geom_boxplot(aes(col = Area))
ggplot(BookPrices, aes(Area, Price, group = Area)) +
geom_boxplot(aes(fill = Area))
N <- 10e4
bootstrap.values <- vector(mode = "numeric", length = N)
prices.math <- BookPrices[Area == "Math & Science"]$Price
prices.science <- BookPrices[Area == "Social Sciences"]$Price
bootstrap.values <- vector(mode = "numeric", length = N)
bootstrap.values
bootstrap.values <- vector(mode = "numeric", length = N); n <- length(prices.math)
bootstrap.values <- vector(mode = "numeric", length = N); n <- length(prices.math)
for(i in 1:N)
{
bootstrap.values <- mean( sample(1:n, n, replace = T) )
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..color..))
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..))
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30)
bootstrap.values <- vector(mode = "numeric", length = N); n <- length(prices.math)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(1:n, n, replace = T) )
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30)
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
bootstrap.mean <- mean(bootstrap.values)
bootstrap.mean
observed <- mean(prices.math)
observed
observed <- mean(prices.math)
observed
bootstrap.mean <- mean(bootstrap.values)
bootstrap.mean
prices.math
prices.math
observed
bootstrap.values <- vector(mode = "numeric", length = N); n <- length(prices.math)
observed <- mean(prices.math)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(prices.math, n, replace = T) )
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
bootstrap.mean <- mean(bootstrap.values)
bootstrap.mean
observed
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
bootstrap.mean
bootstrap.mean <- mean(bootstrap.values)
N <- 10e4
bootstrap.values <- vector(mode = "numeric", length = N); n <- length(prices.science)
observed <- mean(prices.science)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(prices.science, n, replace = T) )
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
bootstrap.mean <- mean(bootstrap.values)
bootstrap.mean
observed
N <- 10e4
bootstrap.values <- vector(mode = "numeric", length = N); n <- length(prices.science)
observed <- mean(prices.science)
for(i in 1:N)
{
samp.math <- sample(prices.math, length(prices.math), replace = T)
samp.science <- sample(prices.science, length(prices.science), replace = T)
bootstrap.values[i] <- mean(samp.math) / mean(samp.science)
}
bootstrap.values
observed
for(i in 1:N)
{
samp.math <- sample(prices.math, length(prices.math), replace = T)
samp.science <- sample(prices.science, length(prices.science), replace = T)
bootstrap.values[i] <- mean(samp.math) / mean(samp.science)
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
bootstrap.mean <- mean(bootstrap.values)
bootstrap.mean
bootstrap.values <- vector(mode = "numeric", length = N); n <- length(prices.science)
observed <- mean(prices.science)
for(i in 1:N)
{
samp.math <- sample(prices.math, length(prices.math), replace = T)
samp.science <- sample(prices.science, length(prices.science), replace = T)
bootstrap.values[i] <- mean(samp.math) / mean(samp.science)
}
bootstrap.values
observed <- mean(prices.math) / mean(prices.science)
observed
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
alpha <- 0.05
quantile(bootstrap.values, c(alpha/2, 1 - alpha/2))
mean(bootstrap.values) - observed
bootstrap.bias <- mean(bootstrap.values) - observed
bootstrap.se <- sd(bootstrap.values)
bootstrap.bias / bootstrap.se
bootstrap.bias
bootstrap.bias <- mean(bootstrap.values) - observed
bootstrap.se <- sd(bootstrap.values)
bootstrap.bias
bootstrap.bias / bootstrap.se
FlightDelays <- data.table(read.csv(paste0(data.dir, "FlightDelays.csv"),
header = T))
ggpairs(FlightDelays)
ggplot(FlightDelays, aes(Carrier, Delay)) +
geom_boxplot()
ggplot(FlightDelays, aes(Carrier, Delay, col = Carrier)) +
geom_boxplot()
ua.flights <- FlightDelays[Carrier == "UA"]$Delay
flights <- melt(FlightDelays, id.vars = Carrier, measure.vars = Delay)
flights <- melt(FlightDelays, id.vars = "Carrier", measure.vars = "Delay")
flights
flights <- melt(FlightDelays, id.vars = "Carrier", measure.vars = "Delay", value.name = "Delay")
flights
aa.delay <- FlightDelays[Carrier == "AA"]$Delay
ua.delay <- FlightDelays[Carrier == "UA"]$Delay
aa.delay <- FlightDelays[Carrier == "AA"]$Delay
aa.delay
ua.delay
n <- length(ua.delay)
n <- length(ua.delay); N <- 10e4
bootstrap.values <- vector(mode = "numeric", length = n)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(ua.delay, n, replace = T))
}
rapply(N, fun = mean( sample(ua.delay, n, replace = T)) )
bootstrap.values <- rapply(N, f = mean( sample(ua.delay, n, replace = T)) )
bootstrap.values <- rapply(N, f = function(x){ mean( sample(ua.delay, n, replace = T))} )
bootstrap.values <- tapply(N, f = function(x){ mean( sample(ua.delay, n, replace = T))} )
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(ua.delay, n, replace = T))
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
n <- length(aa.delay); N <- 10e4
bootstrap.values <- vector(mode = "numeric", length = n)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(aa.delay, n, replace = T))
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
n <- length(aa.delay); N <- 10e4
bootstrap.values <- vector(mode = "numeric", length = n)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(aa.delay, n, replace = T))
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
n <- length(aa.delay); N <- 10e4
bootstrap.values <- vector(mode = "numeric", length = n)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(aa.delay, n, replace = T)) / mean( sample(ua.delay, n, replace = T))
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange")
quantile(bootstrap.values, c(alpha/2, 1 - alpha/2))
observed <- mean(ua.flights) / mean(aa.flights)
mean(aa.flights)
observed <- mean(ua.delay) / mean(aa.delay)
boot.bias <- mean(bootstrap.values) - observed
boot.bias
boot.bias / sd(bootstrap.values)
boot.bias / sd(bootstrap.values)
boot.bias
mean(bootstrap.values)
observed
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed)
observed <- mean(ua.delay) / mean(aa.delay)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(aa.delay, n, replace = T)) / mean( sample(ua.delay, n, replace = T))
}
observed <- mean(aa.delay) / mean(ua.delay)
for(i in 1:N)
{
bootstrap.values[i] <- mean( sample(aa.delay, n, replace = T)) / mean( sample(ua.delay, n, replace = T))
}
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed)
quantile(bootstrap.values, c(alpha/2, 1 - alpha/2))
boot.bias <- mean(bootstrap.values) - observed
boot.bias / sd(bootstrap.values)
ggplot(data.table(values = bootstrap.values), aes(values)) +
geom_histogram(aes(y = ..density.., fill = ..count..), bins = 30) +
geom_density(col = "darkorange") +
geom_vline(xintercept = observed, col = "darkred")
x <- c(1, 2, 2, 3)
g <- function(theta) sum(log( 1 + (x-theta)^2))
optimize(g, interval = c(0, 4))
obj <- optimize(g, interval = c(0, 4))
obj$minimum
obj$objective
logL <- function(theta) sum(log(dcauchy(x, theta)))
optimize(logL, interval = c(0, 4), maximum = T)
logL <- function(theta) sum(log(dcauchy(x, theta)))
optimize(logL, interval = c(0, 4), maximum = T)
# Chunk 1: knitr_setup
knitr::opts_chunk$set(
echo = T,
eval = TRUE,
dev = 'png',
fig.width = 9,
fig.height = 3.5)
options(knitr.table.format = "latex")
# Chunk 2: report_setup
# Data Wrangling
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
library(tinytex, quietly = TRUE, warn.conflicts = FALSE)
library(stringr, quietly = TRUE, warn.conflicts = FALSE)
library(lubridate, quietly = TRUE, warn.conflicts = FALSE)
library(reshape2, quietly = TRUE, warn.conflicts = FALSE)
library(ggrepel, quietly = TRUE, warn.conflicts = FALSE)
# Plotting / Graphics
library(ggplot2, quietly = TRUE, warn.conflicts = FALSE)
library(ggrepel, quietly = TRUE, warn.conflicts = FALSE)
library(ggthemes, quietly = TRUE, warn.conflicts = FALSE)
library(GGally, quietly = TRUE, warn.conflicts = FALSE)
library(grid, quietly = TRUE, warn.conflicts = FALSE)
library(gridExtra, quietly = TRUE, warn.conflicts = FALSE)
library(png, quietly = TRUE, warn.conflicts = FALSE)
library(extrafont, quietly = TRUE, warn.conflicts = FALSE)
# Formatting / Markdown
library(knitr, quietly = TRUE, warn.conflicts = FALSE)
library(kableExtra, quietly = TRUE, warn.conflicts = FALSE)
library(scales, quietly = TRUE, warn.conflicts = FALSE)
library(pander, quietly = TRUE, warn.conflicts = FALSE)
library(formattable, quietly = TRUE, warn.conflicts = FALSE)
# Utility
library(here, quietly = TRUE, warn.conflicts = FALSE)
# Resampling & Modeling
library(car, quietly = TRUE, warn.conflicts = FALSE)
library(MASS, quietly = TRUE, warn.conflicts = FALSE)
library(ISLR, quietly = TRUE, warn.conflicts = FALSE)
library(rsample, quietly = TRUE, warn.conflicts = FALSE)
library(caret, quietly = TRUE, warn.conflicts = FALSE)
library(class, quietly = TRUE, warn.conflicts = FALSE)
library(boot, quietly = TRUE, warn.conflicts = FALSE)
library(vip, quietly = TRUE, warn.conflicts = FALSE)
library(e1071, quietly = TRUE, warn.conflicts = FALSE)
options(tinytex.verbose = TRUE)
suppressMessages(library("tidyverse"))
pretty_kable <- function(data, title, dig = 2) {
kable(data, caption = title, digits = dig) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
kableExtra::kable_styling(latex_options = "hold_position")
}
theme_set(theme_light())
# Theme Overrides
theme_update(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold", color = "darkgreen"),
axis.title = element_text(face = "bold", size = 12, colour = "steelblue4"),
plot.subtitle = element_text(face = "bold", size = 8, colour = "darkred"),
legend.title = element_text(size = 12, color = "darkred", face = "bold"),
legend.position = "right", legend.title.align=0.5,
panel.border = element_rect(linetype = "solid",
colour = "lightgray"),
plot.margin = unit(c( 0.1, 0.1, 0.1, 0.1), "inches"))
data.dir <- paste0(here::here(), "/datasets/")
select <- dplyr::select
# Chunk 3: pander_setup
knitr::opts_chunk$set(comment = NA)
panderOptions('table.alignment.default', function(df)
ifelse(sapply(df, is.numeric), 'right', 'left'))
panderOptions('table.split.table', Inf)
panderOptions('big.mark', ",")
panderOptions('keep.trailing.zeros', TRUE)
# Chunk 4
rm(list = ls())
knit_with_parameters('D:/Projects/Statistical-Computing/ISLR/09_Support-Vector-Machines.rmd')
install.packages("LiblineaR")
library(LiblineaR, quietly = TRUE, warn.conflicts = FALSE)
set.seed(1)
x <- matrix(rnorm(20*2), ncol = 2)
y <- c(rep(-1, 10), rep(1, 10))
y
x[y == 1,] <- x[y==1,] + 1
x
plot(x, col=(3-y))
dat <- data.table(x, y = as.factor(y))
dat
dat <- data.table(x = x, y = as.factor(y))
dat
dat
dat <- data.table(x,as.factor(y))
dat
x
dat <- data.table(x = x, as.factor(y))
dat
dat <- data.table(x = x, y = as.factor(y))
dat
dat <- data.table(x1 = x[,1], x2 = x[, 2], y = as.factor(y))
dat
svmfit <- svm(y ~ ., data = dat, kernel = "linear", cost = 10, scale = F)
svmfit
plot(svmfit, dat)
svmfit$index
mu <- c(rep(1, 5), rep(0, 5))
mu
mvrnorm(10, 0)
set.seed(1001)
counts = 100
errate = rep(0, counts)
for(i in 1:counts){
x = matrix(rnorm(100 * 10), ncol = 10)
y = c(rep(0, 50), rep(1, 50))
x[y == 1, 1:5] = x[y == 1, 1:5] + 1
dat = data.frame(x = x, y = as.factor(y))
svm.fit = svm(y ~ ., data = dat, kernel = "linear", cost = 1)
xtest = matrix(rnorm(100 * 10), ncol = 10)
ytest = sample(c(0, 1), 100, rep = TRUE)
xtest[ytest == 1, 1:5] = x[ytest == 1, 1:5] + 1
testdat = data.frame(x = xtest, y = as.factor(ytest))
ypred = predict(svm.fit, testdat)
result = table(predict = ypred, truth = testdat$y)
errate[i] = 1 - (result[1] + result[4]) / 100
}
mean(errate)
set.seed(1001)
counts = 100
errate = rep(0, counts)
for(i in 1:counts){
x = matrix(rnorm(100 * 10), ncol = 10)
y = c(rep(0, 50), rep(1, 50))
x[y == 1, 1:5] = x[y == 1, 1:5] + 1
dat = data.frame(x = x, y = as.factor(y))
svm.fit = svm(y ~ ., data = dat, kernel = "linear", cost = 1)
xtest = matrix(rnorm(100 * 10), ncol = 10)
ytest = sample(c(0, 1), 100, rep = TRUE)
xtest[ytest == 1,] = xtest[ytest == 1,] + 1
testdat = data.frame(x = xtest, y = as.factor(ytest))
ypred = predict(svm.fit, testdat)
result = table(predict = ypred, truth = testdat$y)
errate[i] = 1 - (result[1] + result[4]) / 100
}
mean(errate)
